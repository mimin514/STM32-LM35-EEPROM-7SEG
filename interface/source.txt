using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.ClipboardSource.SpreadsheetML;

namespace FrmBKRAT7
{
    public partial class Form1 : Form
    {
        private byte[] buffer = new byte[256]; // Chứa data của frame truyền
        private int index = 0; //vị trí của mảng (trong buffer)
        private bool isReceiving = false; //Biến để kiểm tra xem là có đang nhận data hay không, nếu = 0 đã nhận xong hoặc chưa nhận

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            //Đọc các port khả dụng trên PC
            liscom.DataSource = SerialPort.GetPortNames();
            //string[] lisnamecom = SerialPort.GetPortNames(); ;
           // liscom.Items.AddRange(lisnamecom);
            string[] BaudRate = { "1200", "2400", "4800", "9600", "19200", "38400", "57600", "115200" };
            cbBaudRate.Items.AddRange(BaudRate);
            // Cài đặt cho DataBits
            string[] Databits = { "6", "7", "8" };
            cbDataBits.Items.AddRange(Databits);
            //Cho Parity
            string[] Parity = { "None", "Odd", "Even" };
            cbParity.Items.AddRange(Parity);
            //Cho Stop bit
            string[] stopbit = { "1", "1.5", "2" };
            cbStopBits.Items.AddRange(stopbit);
        }

        private void btnConnect_Click(object sender, EventArgs e)
        {
            try
            {
                if (cbBaudRate.Text == "") MessageBox.Show("Bạn chưa chọn tốc độ BaudRate!", "Cảnh báo");

                    serialPort.PortName = liscom.Text;
                    serialPort.BaudRate = int.Parse(cbBaudRate.Text);
                    serialPort.DataBits = int.Parse(cbDataBits.Text);
                    serialPort.Parity = (Parity)Enum.Parse(typeof(Parity), cbParity.Text);
                    serialPort.StopBits = (StopBits)Enum.Parse(typeof(StopBits), cbStopBits.Text, true);
                    serialPort.Open();
                    progressBar2.Value = 100;
                    btnConnect.Enabled = false;
                    btnDisconnect.Enabled = true;
                

            }
            catch(Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void btnDisconnect_Click(object sender, EventArgs e)
        {
            try
            {
                serialPort.Close();
                btnDisconnect.Enabled = false;
                btnConnect.Enabled = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        string data = "";
        int giatri = 0;
        private void serialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            data += serialPort.ReadExisting();
            if (data.Length > 3)
            {
                txtReceivedMessages.Invoke((MethodInvoker)delegate { txtReceivedMessages.AppendText(data + Environment.NewLine); });
                data = "";

            }

        }

        private void btnSend_Click(object sender, EventArgs e)
        {
            serialPort.Write(txtSendData.Text);
        }

        private void cbPortName_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void txtReceivedMessages_TextChanged(object sender, EventArgs e)
        {

        }

        
    }
}
